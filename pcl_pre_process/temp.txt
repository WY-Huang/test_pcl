#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/visualization/cloud_viewer.h>
#include <boost/thread/thread.hpp>

using namespace std;

float getDistanceFromPointToPlane(double A, double B, double C, double D, float x0, float y0, float z0)
{

    float absDistance = abs(A * x0 + B * y0 + C * z0 + D) / sqrt(A * A + B * B + C * C);//计算点到平面的距离
    float z = -(A * x0 + B * y0 + D) / C; // 计算该点二维x0y上的位置对应平面点的Z值
    if (z > z0)
    {
        absDistance = -absDistance;  //如果点在平面下则输出距离值为负
    }
    return absDistance;
}

int
   main(int argc, char** argv)
{
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
    
    pcl::PCDReader reader;
    // 读入点云PCD文件
    reader.read("30m.pcd", *cloud);
    cout << "Point cloud data: " << cloud->points.size() << " points" << endl;
    //创建分割时所需要的模型系数对象coefficients及存储内点的点索引集合对象inliers。
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices);
    // 创建分割对象
    pcl::SACSegmentation<pcl::PointXYZ> seg;
    // 可选择配置，设置模型系数需要优化
    seg.setOptimizeCoefficients(true);
    // 必须配置，设置分割的模型类型、所用随机参数估计方法
    seg.setModelType(pcl::SACMODEL_PLANE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setDistanceThreshold(0.15);// 距离阈值 单位m。距离阈值决定了点被认为是局内点时必须满足的条件
    //距离阈值表示点到估计模型的距离最大值。
    seg.setInputCloud(cloud);//输入点云
    seg.segment(*inliers, *coefficients);//实现分割，并存储分割结果到点集合inliers及存储平面模型系数coefficients
    if (inliers->indices.size() == 0)
    {
        PCL_ERROR("Could not estimate a planar model for the given dataset.");
        return (-1);
    }
    //***********************************************************************
    //-----------平面模型的系数 A,B,C,D-----------
    double A = coefficients->values[0];
    double B = coefficients->values[1];
    double C = coefficients->values[2];
    double D = coefficients->values[3];
    //***********************************************************************
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud0(new pcl::PointCloud<pcl::PointXYZ>);
    vector<int>pointIdxVec;

    for (int i = 0; i < cloud->points.size(); ++i)
    {
        float x0 = cloud->points[i].x;
        float y0 = cloud->points[i].y;
        float z0 = cloud->points[i].z;

        float absDistance = fabs(A * x0 + B * y0 + C * z0 + D) / sqrt(A * A + B * B + C * C);//计算点到平面的距离

        if (absDistance < 0.1)//距离阈值
        {
            pointIdxVec.push_back(i);
        }
    }
    pcl::copyPointCloud(*cloud, pointIdxVec, *cloud0);
    pcl::PCDWriter writer;
    writer.write<pcl::PointXYZ>("3dpoints_object.pcd", *cloud0, false);

    // 点云可视化
    boost::shared_ptr<pcl::visualization::PCLVisualizer>viewer(new pcl::visualization::PCLVisualizer("显示点云"));
    //左边窗口显示输入的点云,右边的窗口显示分割后的点云
    int v1(0), v2(0);
    viewer->createViewPort(0, 0, 0.5, 1, v1);
    viewer->createViewPort(0.5, 0, 1, 1, v2);
    viewer->setBackgroundColor(0, 0, 0, v1);
    viewer->setBackgroundColor(0.3, 0.3, 0.3, v2);
    pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> color_in(cloud, 255, 0, 0);
    viewer->addPointCloud<pcl::PointXYZ>(cloud, color_in, "cloud_in", v1);
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "cloud_in", v1);

    viewer->addPointCloud<pcl::PointXYZ>(cloud0, "cloud_out", v2);
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_COLOR, 0, 1, 0, "cloud_out", v2);
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "cloud_out", v2);

    while (!viewer->wasStopped())
    {
        viewer->spinOnce(100);
        boost::this_thread::sleep(boost::posix_time::microseconds(1000));
    }

    return (0);
}


#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/ModelCoefficients.h>  //RANSAC相关头文件
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/filters/project_inliers.h>  // 投影滤波 
#include <pcl/surface/concave_hull.h>

int
main(int argc, char** argv)
{
    //--------------------------加载点云数据----------------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
          
    pcl::PCDReader reader;
    reader.read("data//table_scene_lms4001.pcd", *cloud);
    std::cerr << "原始点云点的个数: " << cloud->points.size() << std::endl;
    //-------------------------RANSAC拟合平面---------------------------
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices);
    pcl::SACSegmentation<pcl::PointXYZ> seg; 
    seg.setOptimizeCoefficients(true);
    seg.setModelType(pcl::SACMODEL_PLANE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setDistanceThreshold(0.01);
    seg.setInputCloud(cloud);
    seg.segment(*inliers, *coefficients);
    //-----------------------点云投影到平面----------------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_projected(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::ProjectInliers<pcl::PointXYZ> proj;
    proj.setModelType(pcl::SACMODEL_PLANE);
    proj.setInputCloud(cloud);
    proj.setModelCoefficients(coefficients);
    proj.filter(*cloud_projected);
    std::cerr << "投影后点的个数: "<< cloud_projected->points.size() << std::endl;
    pcl::PCDWriter writer;
    writer.write("投影点云.pcd", *cloud_projected, true);
    #include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/ModelCoefficients.h>  //RANSAC相关头文件
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/filters/project_inliers.h>  // 投影滤波 
#include <pcl/surface/concave_hull.h>

int
main(int argc, char** argv)
{
    //--------------------------加载点云数据----------------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
          
    pcl::PCDReader reader;
    reader.read("data//table_scene_lms4001.pcd", *cloud);
    std::cerr << "原始点云点的个数: " << cloud->points.size() << std::endl;
    //-------------------------RANSAC拟合平面---------------------------
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices);
    pcl::SACSegmentation<pcl::PointXYZ> seg; 
    seg.setOptimizeCoefficients(true);
    seg.setModelType(pcl::SACMODEL_PLANE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setDistanceThreshold(0.01);
    seg.setInputCloud(cloud);
    seg.segment(*inliers, *coefficients);
    //-----------------------点云投影到平面----------------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_projected(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::ProjectInliers<pcl::PointXYZ> proj;
    proj.setModelType(pcl::SACMODEL_PLANE);
    proj.setInputCloud(cloud);
    proj.setModelCoefficients(coefficients);
    proj.filter(*cloud_projected);
    std::cerr << "投影后点的个数: "<< cloud_projected->points.size() << std::endl;
    pcl::PCDWriter writer;
    writer.write("投影点云.pcd", *cloud_projected, true);
    //---------------提取投影平面点云的凸多边形边界-------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_vex_hull(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::ConvexHull<pcl::PointXYZ> hull;  //创建凸包对象
    hull.setInputCloud(cloud_projected);            //设置输入点云
    hull.setDimension(2);                 //设置输入数据的维度(2D)
    hull.reconstruct(*cloud_vex_hull);//计算2D凸包结果

    std::cerr << "凸多边形的点数: " << cloud_vex_hull->points.size() << std::endl;

    writer.write("凸多边形.pcd", *cloud_vex_hull, true);


    return (0);
}


    std::cerr << "凸多边形的点数: " << cloud_vex_hull->points.size() << std::endl;

    writer.write("凸多边形.pcd", *cloud_vex_hull, true);


    return (0);
}
