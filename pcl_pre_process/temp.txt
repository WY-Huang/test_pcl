#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/visualization/cloud_viewer.h>
#include <boost/thread/thread.hpp>

using namespace std;

float getDistanceFromPointToPlane(double A, double B, double C, double D, float x0, float y0, float z0)
{

    float absDistance = abs(A * x0 + B * y0 + C * z0 + D) / sqrt(A * A + B * B + C * C);//计算点到平面的距离
    float z = -(A * x0 + B * y0 + D) / C; // 计算该点二维x0y上的位置对应平面点的Z值
    if (z > z0)
    {
        absDistance = -absDistance;  //如果点在平面下则输出距离值为负
    }
    return absDistance;
}

int
   main(int argc, char** argv)
{
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
    
    pcl::PCDReader reader;
    // 读入点云PCD文件
    reader.read("30m.pcd", *cloud);
    cout << "Point cloud data: " << cloud->points.size() << " points" << endl;
    //创建分割时所需要的模型系数对象coefficients及存储内点的点索引集合对象inliers。
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices);
    // 创建分割对象
    pcl::SACSegmentation<pcl::PointXYZ> seg;
    // 可选择配置，设置模型系数需要优化
    seg.setOptimizeCoefficients(true);
    // 必须配置，设置分割的模型类型、所用随机参数估计方法
    seg.setModelType(pcl::SACMODEL_PLANE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setDistanceThreshold(0.15);// 距离阈值 单位m。距离阈值决定了点被认为是局内点时必须满足的条件
    //距离阈值表示点到估计模型的距离最大值。
    seg.setInputCloud(cloud);//输入点云
    seg.segment(*inliers, *coefficients);//实现分割，并存储分割结果到点集合inliers及存储平面模型系数coefficients
    if (inliers->indices.size() == 0)
    {
        PCL_ERROR("Could not estimate a planar model for the given dataset.");
        return (-1);
    }
    //***********************************************************************
    //-----------平面模型的系数 A,B,C,D-----------
    double A = coefficients->values[0];
    double B = coefficients->values[1];
    double C = coefficients->values[2];
    double D = coefficients->values[3];
    //***********************************************************************
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud0(new pcl::PointCloud<pcl::PointXYZ>);
    vector<int>pointIdxVec;

    for (int i = 0; i < cloud->points.size(); ++i)
    {
        float x0 = cloud->points[i].x;
        float y0 = cloud->points[i].y;
        float z0 = cloud->points[i].z;

        float absDistance = fabs(A * x0 + B * y0 + C * z0 + D) / sqrt(A * A + B * B + C * C);//计算点到平面的距离

        if (absDistance < 0.1)//距离阈值
        {
            pointIdxVec.push_back(i);
        }
    }
    pcl::copyPointCloud(*cloud, pointIdxVec, *cloud0);
    pcl::PCDWriter writer;
    writer.write<pcl::PointXYZ>("3dpoints_object.pcd", *cloud0, false);

    // 点云可视化
    boost::shared_ptr<pcl::visualization::PCLVisualizer>viewer(new pcl::visualization::PCLVisualizer("显示点云"));
    //左边窗口显示输入的点云,右边的窗口显示分割后的点云
    int v1(0), v2(0);
    viewer->createViewPort(0, 0, 0.5, 1, v1);
    viewer->createViewPort(0.5, 0, 1, 1, v2);
    viewer->setBackgroundColor(0, 0, 0, v1);
    viewer->setBackgroundColor(0.3, 0.3, 0.3, v2);
    pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> color_in(cloud, 255, 0, 0);
    viewer->addPointCloud<pcl::PointXYZ>(cloud, color_in, "cloud_in", v1);
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "cloud_in", v1);

    viewer->addPointCloud<pcl::PointXYZ>(cloud0, "cloud_out", v2);
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_COLOR, 0, 1, 0, "cloud_out", v2);
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "cloud_out", v2);

    while (!viewer->wasStopped())
    {
        viewer->spinOnce(100);
        boost::this_thread::sleep(boost::posix_time::microseconds(1000));
    }

    return (0);
}


#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/ModelCoefficients.h>  //RANSAC相关头文件
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/filters/project_inliers.h>  // 投影滤波 
#include <pcl/surface/concave_hull.h>

int
main(int argc, char** argv)
{
    //--------------------------加载点云数据----------------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
          
    pcl::PCDReader reader;
    reader.read("data//table_scene_lms4001.pcd", *cloud);
    std::cerr << "原始点云点的个数: " << cloud->points.size() << std::endl;
    //-------------------------RANSAC拟合平面---------------------------
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices);
    pcl::SACSegmentation<pcl::PointXYZ> seg; 
    seg.setOptimizeCoefficients(true);
    seg.setModelType(pcl::SACMODEL_PLANE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setDistanceThreshold(0.01);
    seg.setInputCloud(cloud);
    seg.segment(*inliers, *coefficients);
    //-----------------------点云投影到平面----------------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_projected(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::ProjectInliers<pcl::PointXYZ> proj;
    proj.setModelType(pcl::SACMODEL_PLANE);
    proj.setInputCloud(cloud);
    proj.setModelCoefficients(coefficients);
    proj.filter(*cloud_projected);
    std::cerr << "投影后点的个数: "<< cloud_projected->points.size() << std::endl;
    pcl::PCDWriter writer;
    writer.write("投影点云.pcd", *cloud_projected, true);
    #include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/ModelCoefficients.h>  //RANSAC相关头文件
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/filters/project_inliers.h>  // 投影滤波 
#include <pcl/surface/concave_hull.h>

int
main(int argc, char** argv)
{
    //--------------------------加载点云数据----------------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
          
    pcl::PCDReader reader;
    reader.read("data//table_scene_lms4001.pcd", *cloud);
    std::cerr << "原始点云点的个数: " << cloud->points.size() << std::endl;
    //-------------------------RANSAC拟合平面---------------------------
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices);
    pcl::SACSegmentation<pcl::PointXYZ> seg; 
    seg.setOptimizeCoefficients(true);
    seg.setModelType(pcl::SACMODEL_PLANE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setDistanceThreshold(0.01);
    seg.setInputCloud(cloud);
    seg.segment(*inliers, *coefficients);
    //-----------------------点云投影到平面----------------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_projected(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::ProjectInliers<pcl::PointXYZ> proj;
    proj.setModelType(pcl::SACMODEL_PLANE);
    proj.setInputCloud(cloud);
    proj.setModelCoefficients(coefficients);
    proj.filter(*cloud_projected);
    std::cerr << "投影后点的个数: "<< cloud_projected->points.size() << std::endl;
    pcl::PCDWriter writer;
    writer.write("投影点云.pcd", *cloud_projected, true);
    //---------------提取投影平面点云的凸多边形边界-------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_vex_hull(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::ConvexHull<pcl::PointXYZ> hull;  //创建凸包对象
    hull.setInputCloud(cloud_projected);            //设置输入点云
    hull.setDimension(2);                 //设置输入数据的维度(2D)
    hull.reconstruct(*cloud_vex_hull);//计算2D凸包结果

    std::cerr << "凸多边形的点数: " << cloud_vex_hull->points.size() << std::endl;

    writer.write("凸多边形.pcd", *cloud_vex_hull, true);


    return (0);
}


    std::cerr << "凸多边形的点数: " << cloud_vex_hull->points.size() << std::endl;

    writer.write("凸多边形.pcd", *cloud_vex_hull, true);


    return (0);
}


#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>

#include <pcl/ModelCoefficients.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/common/common_headers.h>
#include <pcl/filters/extract_indices.h>

#include <pcl/visualization/cloud_viewer.h>
#include <boost/thread/thread.hpp>

using namespace std;

int
main(int argc, char** argv)
{
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
   
    pcl::PCDReader reader;
    // 读入点云PCD文件
    reader.read("cloud_data//R.pcd", *cloud);
    cout << "Point cloud data: " << cloud->points.size() << " points" << endl;


    //创建拟合时所需要的模型系数对象coefficients及存储内点的点索引集合对象inliers。
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices);
  
    pcl::SACSegmentation<pcl::PointXYZ> seg;
   
    seg.setOptimizeCoefficients(true);  // 可选择配置，设置模型系数需要优化
    // **********必须配置************
    seg.setModelType(pcl::SACMODEL_PERPENDICULAR_PLANE);//设置分割的模型类型
    seg.setMethodType(pcl::SAC_RANSAC);    // 设置所用随机参数估计方法
    seg.setDistanceThreshold(0.05);        // 距离阈值，单位m.

    float angle = 20;                     
    float EpsAngle= pcl::deg2rad(angle);   // 角度转弧度
    Eigen::Vector3f Axis(0.0, 0.0, 1.0); 

    seg.setAxis(Axis);                     // 指定的轴
    seg.setEpsAngle(EpsAngle);             // 夹角阈值(弧度制)

    // 距离阈值表示点到估计模型的距离最大值。
    seg.setInputCloud(cloud);             // 输入点云
    seg.segment(*inliers, *coefficients); // 存储结果到点集合inliers及存储平面模型系数coefficients
    if (inliers->indices.size() == 0)
    {
        PCL_ERROR("Could not estimate a planar model for the given dataset.");
        return (-1);
    }
   
    //-------------------输出平面模型的系数 a,b,c,d----------------
    cout << "Model coefficients: " 
        << coefficients->values[0] << " "
        << coefficients->values[1] << " "
        << coefficients->values[2] << " "
        << coefficients->values[3] << endl;
    cout << "Model inliers: " << inliers->indices.size() << endl;

    //---------------------使用索引提取器提取内点------------------
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filtered(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::ExtractIndices<pcl::PointXYZ> extract;
    extract.setInputCloud(cloud);
    extract.setIndices(inliers);
    extract.filter(*cloud_filtered);

    cout << "Inliers cloud after filtering: " << endl;
    cout << *cloud_filtered << endl;

    pcl::PCDWriter writer;
    //writer.write<pcl::PointXYZ>("3dpoints_ground.pcd", *cloud_filtered, false);


    // -------------------------点云可视化-------------------------
    boost::shared_ptr<pcl::visualization::PCLVisualizer>viewer(new pcl::visualization::PCLVisualizer("显示点云"));
    //左边窗口显示输入的点云,右边的窗口显示满足约束条件的点云
    int v1(0), v2(0);
    viewer->createViewPort(0, 0, 0.5, 1, v1);
    viewer->createViewPort(0.5, 0, 1, 1, v2);
    viewer->setBackgroundColor(0, 0, 0, v1);
    viewer->setBackgroundColor(0.3, 0.3, 0.3, v2);
    //viewer->addCoordinateSystem(0.1);  //显示XYZ指示轴
    viewer->addPlane(*coefficients, "plane", v2);//显示拟合出来的平面
    pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> color_in(cloud, 255, 0, 0);
    viewer->addPointCloud<pcl::PointXYZ>(cloud, color_in, "cloud_in", v1);
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "cloud_in", v1);

    viewer->addPointCloud<pcl::PointXYZ>(cloud_filtered, "cloud_out", v2);
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_COLOR, 0, 1, 0, "cloud_out", v2);
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "cloud_out", v2);

    while (!viewer->wasStopped())
    {
        viewer->spinOnce(100);
        boost::this_thread::sleep(boost::posix_time::microseconds(1000));
    }

    return (0);
}


#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/filters/plane_clipper3D.h>
#include <pcl/filters/extract_indices.h>
#include <boost/thread/thread.hpp>
#include <pcl/visualization/pcl_visualizer.h>

typedef pcl::PointXYZ PointT;
using namespace std;
void viewer(pcl::PointCloud<PointT>::Ptr& before, pcl::PointCloud<PointT>::Ptr& after)
{
    boost::shared_ptr<pcl::visualization::PCLVisualizer> view(new pcl::visualization::PCLVisualizer("ShowCloud"));

    int v1(0);
    view->createViewPort(0.0, 0.0, 0.5, 1.0, v1);
    view->setBackgroundColor(0, 0, 0, v1);
    view->addText("Raw point clouds", 10, 10, "v1_text", v1);
    int v2(0);
    view->createViewPort(0.5, 0.0, 1, 1.0, v2);
    view->setBackgroundColor(0.1, 0.1, 0.1, v2);
    view->addText("filtered point clouds", 10, 10, "v2_text", v2);

    view->addPointCloud<pcl::PointXYZ>(before, "sample cloud", v1);
    view->addPointCloud<pcl::PointXYZ>(after, "cloud_filtered", v2);
    view->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_COLOR, 1, 0, 0, "sample cloud", v1);
    view->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_COLOR, 0, 1, 0, "cloud_filtered", v2);
    view->addCoordinateSystem(0.1);
    //view->initCameraParameters();
    while (!view->wasStopped())
    {
        view->spinOnce(100);
        boost::this_thread::sleep(boost::posix_time::microseconds(100000));
    }


}
int main()
{
    pcl::PointCloud<PointT>::Ptr cloud(new pcl::PointCloud<PointT>);
    pcl::PCDReader reader;
    reader.read("data//bunny.pcd", *cloud);
    cout << "The points data:  " << cloud->points.size() << endl;
    pcl::PointCloud<PointT>::Ptr filter(new pcl::PointCloud<PointT>);

    Eigen::Vector4f plane; // 定义平面参数
    plane << 0, 0, 1, 0;

    pcl::IndicesPtr indices(new vector <int>()); // 保存裁剪点的索引
    pcl::PlaneClipper3D<PointT> clipper(plane);
    clipper.setPlaneParameters(plane);
    clipper.clipPointCloud3D(*cloud, *indices);
    pcl::ExtractIndices<PointT> extract;
    extract.setInputCloud(cloud);
    extract.setIndices(indices);
    extract.setNegative(true);
    extract.filter(*filter);

    cout << "The filtered points data:  " << filter->points.size() << endl;
    viewer(cloud, filter);

    return 0;
}


if(finish_line==true)
    {
        finish_line=false;
        b_int_show_record_finish = true;
        vtkIdType idtype;
        vtkSmartPointer<vtkCubeAxesActor>   cubeAxesActor=vtkSmartPointer<vtkCubeAxesActor>::New();
        vtkSmartPointer<vtkPoints>   points=vtkSmartPointer<vtkPoints>::New();
        vtkSmartPointer<vtkCellArray>   cells=vtkSmartPointer<vtkCellArray>::New();
        vtkSmartPointer<vtkPolyData>   polydata=vtkSmartPointer<vtkPolyData>::New();
        vtkSmartPointer<vtkFloatArray>  scalars=vtkSmartPointer<vtkFloatArray>::New();
        vtkSmartPointer<vtkLookupTable>   lut=vtkSmartPointer<vtkLookupTable>::New();
        vtkSmartPointer<vtkPolyDataMapper>   mapper=vtkSmartPointer<vtkPolyDataMapper>::New();
        vtkSmartPointer<vtkActor>  actor=vtkSmartPointer<vtkActor>::New();
        vtkSmartPointer<vtkScalarBarActor> scalarBar=vtkSmartPointer<vtkScalarBarActor>::New();
        vtkActorCollection* actorCollection = renderer->GetActors();
        vtkActor2DCollection* actorCollection2D=renderer->GetActors2D();
        int num = actorCollection->GetNumberOfItems();
        int num1=actorCollection2D->GetNumberOfItems();
        //这个函数比较重要，否则getNextActor将没法得到正确的actor
        actorCollection->InitTraversal();
        actorCollection2D->InitTraversal();
        for (int i=0;i<num;++i)
        {
        vtkActor* actor = actorCollection->GetNextActor();
        renderer->RemoveActor(actor);
        //处理code
        }
        for (int i=0;i<num1;++i)
        {
        vtkActor2D* actor2D = actorCollection2D->GetNextActor2D();
        renderer->RemoveActor2D(actor2D);
        //处理code
        }
        scalars->SetNumberOfValues(pclclould->size());
        for (std::size_t i = 0; i < pclclould->points.size (); ++i)
        {
            idtype = points->InsertNextPoint(pclclould->points[i].x
                                            , pclclould->points[i].y
                                            , pclclould->points[i].z);
            cells->InsertNextCell(1, &idtype);
            scalars->SetValue(i, static_cast<float>(pclclould->points[i].z) );

        }
        lut->Build();
        polydata->SetPoints(points);
        polydata->SetVerts(cells);
        polydata->GetPointData()->SetScalars(scalars);

        mapper->SetInputData(polydata);
        mapper->ScalarVisibilityOn();
        mapper->SetScalarRange(points->GetBounds()[4],points->GetBounds()[5]);
        mapper->SetColorModeToMapScalars();
        mapper->SetLookupTable(lut);
        actor->SetMapper(mapper);
        actor->GetProperty()->SetInterpolationToFlat();
        cubeAxesActor->SetBounds(points->GetBounds());

        cubeAxesActor->SetScreenSize(10);

        cubeAxesActor->DrawZGridlinesOff();
        cubeAxesActor->DrawXGridlinesOn();
        cubeAxesActor->DrawYGridlinesOn();

        cubeAxesActor->SetDrawXInnerGridlines(false);
        cubeAxesActor->SetDrawYInnerGridlines(false);
        cubeAxesActor->SetDrawZInnerGridlines(false);

        cubeAxesActor->SetGridLineLocation(2);
        cubeAxesActor->XAxisMinorTickVisibilityOff();
        cubeAxesActor->YAxisMinorTickVisibilityOff();
        cubeAxesActor->ZAxisMinorTickVisibilityOff();
        cubeAxesActor->SetCamera(renderer->GetActiveCamera());

//        scalarBar->SetTitle("Distance");
        scalarBar->SetNumberOfLabels(5);
        scalarBar->SetLookupTable(lut);

        vtkTextProperty* textProp = scalarBar->GetLabelTextProperty();  // 获取ColorBarActor的TextProperty
        textProp->SetFontSize(12);                                      // 更改TextProperty的字体大小

        scalarBar->SetWidth(0.08);                                      // 更改ColorBarActor的高度和宽度
        scalarBar->SetHeight(0.6);
        scalarBar->GetPositionCoordinate()->SetValue(0.9, 0.2);         // 设置ColorBarActor的位置

        renderer->AddActor(cubeAxesActor);
        renderer->AddActor(actor);
        renderer->AddActor2D(scalarBar);
        renderer->ResetCamera();
        ui->pclShow->GetRenderWindow()->Render();
        ui->pclShow->GetRenderWindow()->Finalize();
        ui->pclShow->update();
    }


    if(finsih==true)
    {
        finsih=false;
        b_int_show_record_finish = true;
        vtkIdType idtype;
        vtkSmartPointer<vtkCubeAxesActor>   cubeAxesActor=vtkSmartPointer<vtkCubeAxesActor>::New();
        vtkSmartPointer<vtkPoints>   points=vtkSmartPointer<vtkPoints>::New();
        vtkSmartPointer<vtkCellArray>   cells=vtkSmartPointer<vtkCellArray>::New();
        vtkSmartPointer<vtkPolyData>   polydata=vtkSmartPointer<vtkPolyData>::New();
        vtkSmartPointer<vtkFloatArray>  scalars=vtkSmartPointer<vtkFloatArray>::New();
        vtkSmartPointer<vtkLookupTable>   lut=vtkSmartPointer<vtkLookupTable>::New();
        vtkSmartPointer<vtkPolyDataMapper>   mapper=vtkSmartPointer<vtkPolyDataMapper>::New();
        vtkSmartPointer<vtkActor>  actor=vtkSmartPointer<vtkActor>::New();
        vtkSmartPointer<vtkScalarBarActor> scalarBar=vtkSmartPointer<vtkScalarBarActor>::New();
//        cout<<pclclould->size()<<endl;
        vtkActorCollection* actorCollection = renderer->GetActors();
        vtkActor2DCollection* actorCollection2D=renderer->GetActors2D();
        int num = actorCollection->GetNumberOfItems();
        int num1=actorCollection2D->GetNumberOfItems();
        vtkRendererCollection * collection=vtkRendererCollection ::New();
        collection=ui->pclShow->GetRenderWindow()->GetRenderers();
        int num2=collection->GetNumberOfItems();
        cout<<num2<<endl;
//        collection->InitTraversal();
//        for(int i=0;i<num2;i++)
//        {
//            vtkRenderer* renderer=collection->GetNextItem();
//            ui->pclShow->GetRenderWindow()->RemoveRenderer(renderer);
//        //renderer->Delete();
//        }
//        cout<<num<<endl;
//        cout<<num1<<endl;
        //这个函数比较重要，否则getNextActor将没法得到正确的actor
        actorCollection->InitTraversal();
        actorCollection2D->InitTraversal();
        for (int i=0;i<num;++i)
        {
        vtkActor* actor = actorCollection->GetNextActor();
        renderer->RemoveActor(actor);
        //处理code
        }
        for (int i=0;i<num1;++i)
        {
        vtkActor2D* actor2D = actorCollection2D->GetNextActor2D();
        renderer->RemoveActor2D(actor2D);

        }
        scalars->SetNumberOfValues(pclclould->size());
        for (std::size_t i = 0; i < pclclould->points.size (); ++i)
        {
            idtype = points->InsertNextPoint(pclclould->points[i].x
                                            , pclclould->points[i].y
                                            , pclclould->points[i].z);
            cells->InsertNextCell(1, &idtype);
            scalars->SetValue(i, static_cast<float>(pclclould->points[i].z) );

        }
        lut->Build();
        polydata->SetPoints(points);
        polydata->SetVerts(cells);
        polydata->GetPointData()->SetScalars(scalars);

        mapper->SetInputData(polydata);
        mapper->ScalarVisibilityOn();
        //mapper->SetScalarModeToUsePointData();
        mapper->SetScalarRange(points->GetBounds()[4],points->GetBounds()[5]);
//        qDebug()<<(double)points->GetBounds()[4]<<points->GetBounds()[5];
        mapper->SetColorModeToMapScalars();
        mapper->SetLookupTable(lut);
        actor->SetMapper(mapper);
        actor->GetProperty()->SetInterpolationToFlat();
        cubeAxesActor->SetBounds(points->GetBounds());

        cubeAxesActor->SetScreenSize(10);

        cubeAxesActor->DrawZGridlinesOff();
        cubeAxesActor->DrawXGridlinesOn();
        cubeAxesActor->DrawYGridlinesOn();

        cubeAxesActor->SetDrawXInnerGridlines(false);
        cubeAxesActor->SetDrawYInnerGridlines(false);
        cubeAxesActor->SetDrawZInnerGridlines(false);

        cubeAxesActor->SetGridLineLocation(2);
        cubeAxesActor->XAxisMinorTickVisibilityOff();
        cubeAxesActor->YAxisMinorTickVisibilityOff();
        cubeAxesActor->ZAxisMinorTickVisibilityOff();
        cubeAxesActor->SetCamera(renderer->GetActiveCamera());

//        scalarBar->SetTitle("Distance");
        scalarBar->SetNumberOfLabels(5);
        scalarBar->SetLookupTable(lut);

        vtkTextProperty* textProp = scalarBar->GetLabelTextProperty();  // 获取ColorBarActor的TextProperty
        textProp->SetFontSize(12);                                      // 更改TextProperty的字体大小

        scalarBar->SetWidth(0.08);                                      // 更改ColorBarActor的高度和宽度
        scalarBar->SetHeight(0.6);
        scalarBar->GetPositionCoordinate()->SetValue(0.9, 0.2);         // 设置ColorBarActor的位置

        renderer->AddActor(cubeAxesActor);
        renderer->AddActor(actor);
        renderer->AddActor2D(scalarBar);
        renderer->ResetCamera();
        ui->pclShow->GetRenderWindow()->Render();
        ui->pclShow->GetRenderWindow()->Finalize();
        ui->pclShow->update();
    }